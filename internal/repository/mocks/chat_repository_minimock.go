// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/lookandhate/course_chat/internal/repository.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/lookandhate/course_chat/internal/service/model"
)

// ChatRepositoryMock implements repository.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcChatExists          func(ctx context.Context, chatID int) (b1 bool, err error)
	inspectFuncChatExists   func(ctx context.Context, chatID int)
	afterChatExistsCounter  uint64
	beforeChatExistsCounter uint64
	ChatExistsMock          mChatRepositoryMockChatExists

	funcCreateChat          func(ctx context.Context, cp1 *model.CreateChat) (cp2 *model.ChatModel, err error)
	inspectFuncCreateChat   func(ctx context.Context, cp1 *model.CreateChat)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mChatRepositoryMockCreateChat

	funcCreateMessage          func(ctx context.Context, cp1 *model.CreateMessage) (mp1 *model.MessageModel, err error)
	inspectFuncCreateMessage   func(ctx context.Context, cp1 *model.CreateMessage)
	afterCreateMessageCounter  uint64
	beforeCreateMessageCounter uint64
	CreateMessageMock          mChatRepositoryMockCreateMessage

	funcDelete          func(ctx context.Context, i1 int64) (err error)
	inspectFuncDelete   func(ctx context.Context, i1 int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mChatRepositoryMockDelete
}

// NewChatRepositoryMock returns a mock for repository.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChatExistsMock = mChatRepositoryMockChatExists{mock: m}
	m.ChatExistsMock.callArgs = []*ChatRepositoryMockChatExistsParams{}

	m.CreateChatMock = mChatRepositoryMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*ChatRepositoryMockCreateChatParams{}

	m.CreateMessageMock = mChatRepositoryMockCreateMessage{mock: m}
	m.CreateMessageMock.callArgs = []*ChatRepositoryMockCreateMessageParams{}

	m.DeleteMock = mChatRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*ChatRepositoryMockDeleteParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockChatExists struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockChatExistsExpectation
	expectations       []*ChatRepositoryMockChatExistsExpectation

	callArgs []*ChatRepositoryMockChatExistsParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatRepositoryMockChatExistsExpectation specifies expectation struct of the ChatRepository.ChatExists
type ChatRepositoryMockChatExistsExpectation struct {
	mock      *ChatRepositoryMock
	params    *ChatRepositoryMockChatExistsParams
	paramPtrs *ChatRepositoryMockChatExistsParamPtrs
	results   *ChatRepositoryMockChatExistsResults
	Counter   uint64
}

// ChatRepositoryMockChatExistsParams contains parameters of the ChatRepository.ChatExists
type ChatRepositoryMockChatExistsParams struct {
	ctx    context.Context
	chatID int
}

// ChatRepositoryMockChatExistsParamPtrs contains pointers to parameters of the ChatRepository.ChatExists
type ChatRepositoryMockChatExistsParamPtrs struct {
	ctx    *context.Context
	chatID *int
}

// ChatRepositoryMockChatExistsResults contains results of the ChatRepository.ChatExists
type ChatRepositoryMockChatExistsResults struct {
	b1  bool
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmChatExists *mChatRepositoryMockChatExists) Optional() *mChatRepositoryMockChatExists {
	mmChatExists.optional = true
	return mmChatExists
}

// Expect sets up expected params for ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) Expect(ctx context.Context, chatID int) *mChatRepositoryMockChatExists {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	if mmChatExists.defaultExpectation == nil {
		mmChatExists.defaultExpectation = &ChatRepositoryMockChatExistsExpectation{}
	}

	if mmChatExists.defaultExpectation.paramPtrs != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by ExpectParams functions")
	}

	mmChatExists.defaultExpectation.params = &ChatRepositoryMockChatExistsParams{ctx, chatID}
	for _, e := range mmChatExists.expectations {
		if minimock.Equal(e.params, mmChatExists.defaultExpectation.params) {
			mmChatExists.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChatExists.defaultExpectation.params)
		}
	}

	return mmChatExists
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockChatExists {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	if mmChatExists.defaultExpectation == nil {
		mmChatExists.defaultExpectation = &ChatRepositoryMockChatExistsExpectation{}
	}

	if mmChatExists.defaultExpectation.params != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Expect")
	}

	if mmChatExists.defaultExpectation.paramPtrs == nil {
		mmChatExists.defaultExpectation.paramPtrs = &ChatRepositoryMockChatExistsParamPtrs{}
	}
	mmChatExists.defaultExpectation.paramPtrs.ctx = &ctx

	return mmChatExists
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) ExpectChatIDParam2(chatID int) *mChatRepositoryMockChatExists {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	if mmChatExists.defaultExpectation == nil {
		mmChatExists.defaultExpectation = &ChatRepositoryMockChatExistsExpectation{}
	}

	if mmChatExists.defaultExpectation.params != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Expect")
	}

	if mmChatExists.defaultExpectation.paramPtrs == nil {
		mmChatExists.defaultExpectation.paramPtrs = &ChatRepositoryMockChatExistsParamPtrs{}
	}
	mmChatExists.defaultExpectation.paramPtrs.chatID = &chatID

	return mmChatExists
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) Inspect(f func(ctx context.Context, chatID int)) *mChatRepositoryMockChatExists {
	if mmChatExists.mock.inspectFuncChatExists != nil {
		mmChatExists.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.ChatExists")
	}

	mmChatExists.mock.inspectFuncChatExists = f

	return mmChatExists
}

// Return sets up results that will be returned by ChatRepository.ChatExists
func (mmChatExists *mChatRepositoryMockChatExists) Return(b1 bool, err error) *ChatRepositoryMock {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	if mmChatExists.defaultExpectation == nil {
		mmChatExists.defaultExpectation = &ChatRepositoryMockChatExistsExpectation{mock: mmChatExists.mock}
	}
	mmChatExists.defaultExpectation.results = &ChatRepositoryMockChatExistsResults{b1, err}
	return mmChatExists.mock
}

// Set uses given function f to mock the ChatRepository.ChatExists method
func (mmChatExists *mChatRepositoryMockChatExists) Set(f func(ctx context.Context, chatID int) (b1 bool, err error)) *ChatRepositoryMock {
	if mmChatExists.defaultExpectation != nil {
		mmChatExists.mock.t.Fatalf("Default expectation is already set for the ChatRepository.ChatExists method")
	}

	if len(mmChatExists.expectations) > 0 {
		mmChatExists.mock.t.Fatalf("Some expectations are already set for the ChatRepository.ChatExists method")
	}

	mmChatExists.mock.funcChatExists = f
	return mmChatExists.mock
}

// When sets expectation for the ChatRepository.ChatExists which will trigger the result defined by the following
// Then helper
func (mmChatExists *mChatRepositoryMockChatExists) When(ctx context.Context, chatID int) *ChatRepositoryMockChatExistsExpectation {
	if mmChatExists.mock.funcChatExists != nil {
		mmChatExists.mock.t.Fatalf("ChatRepositoryMock.ChatExists mock is already set by Set")
	}

	expectation := &ChatRepositoryMockChatExistsExpectation{
		mock:   mmChatExists.mock,
		params: &ChatRepositoryMockChatExistsParams{ctx, chatID},
	}
	mmChatExists.expectations = append(mmChatExists.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.ChatExists return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockChatExistsExpectation) Then(b1 bool, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockChatExistsResults{b1, err}
	return e.mock
}

// Times sets number of times ChatRepository.ChatExists should be invoked
func (mmChatExists *mChatRepositoryMockChatExists) Times(n uint64) *mChatRepositoryMockChatExists {
	if n == 0 {
		mmChatExists.mock.t.Fatalf("Times of ChatRepositoryMock.ChatExists mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmChatExists.expectedInvocations, n)
	return mmChatExists
}

func (mmChatExists *mChatRepositoryMockChatExists) invocationsDone() bool {
	if len(mmChatExists.expectations) == 0 && mmChatExists.defaultExpectation == nil && mmChatExists.mock.funcChatExists == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmChatExists.mock.afterChatExistsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmChatExists.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ChatExists implements repository.ChatRepository
func (mmChatExists *ChatRepositoryMock) ChatExists(ctx context.Context, chatID int) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmChatExists.beforeChatExistsCounter, 1)
	defer mm_atomic.AddUint64(&mmChatExists.afterChatExistsCounter, 1)

	if mmChatExists.inspectFuncChatExists != nil {
		mmChatExists.inspectFuncChatExists(ctx, chatID)
	}

	mm_params := ChatRepositoryMockChatExistsParams{ctx, chatID}

	// Record call args
	mmChatExists.ChatExistsMock.mutex.Lock()
	mmChatExists.ChatExistsMock.callArgs = append(mmChatExists.ChatExistsMock.callArgs, &mm_params)
	mmChatExists.ChatExistsMock.mutex.Unlock()

	for _, e := range mmChatExists.ChatExistsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmChatExists.ChatExistsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChatExists.ChatExistsMock.defaultExpectation.Counter, 1)
		mm_want := mmChatExists.ChatExistsMock.defaultExpectation.params
		mm_want_ptrs := mmChatExists.ChatExistsMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockChatExistsParams{ctx, chatID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmChatExists.t.Errorf("ChatRepositoryMock.ChatExists got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmChatExists.t.Errorf("ChatRepositoryMock.ChatExists got unexpected parameter chatID, want: %#v, got: %#v%s\n", *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmChatExists.t.Errorf("ChatRepositoryMock.ChatExists got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmChatExists.ChatExistsMock.defaultExpectation.results
		if mm_results == nil {
			mmChatExists.t.Fatal("No results are set for the ChatRepositoryMock.ChatExists")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmChatExists.funcChatExists != nil {
		return mmChatExists.funcChatExists(ctx, chatID)
	}
	mmChatExists.t.Fatalf("Unexpected call to ChatRepositoryMock.ChatExists. %v %v", ctx, chatID)
	return
}

// ChatExistsAfterCounter returns a count of finished ChatRepositoryMock.ChatExists invocations
func (mmChatExists *ChatRepositoryMock) ChatExistsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChatExists.afterChatExistsCounter)
}

// ChatExistsBeforeCounter returns a count of ChatRepositoryMock.ChatExists invocations
func (mmChatExists *ChatRepositoryMock) ChatExistsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChatExists.beforeChatExistsCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.ChatExists.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChatExists *mChatRepositoryMockChatExists) Calls() []*ChatRepositoryMockChatExistsParams {
	mmChatExists.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockChatExistsParams, len(mmChatExists.callArgs))
	copy(argCopy, mmChatExists.callArgs)

	mmChatExists.mutex.RUnlock()

	return argCopy
}

// MinimockChatExistsDone returns true if the count of the ChatExists invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockChatExistsDone() bool {
	if m.ChatExistsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ChatExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ChatExistsMock.invocationsDone()
}

// MinimockChatExistsInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockChatExistsInspect() {
	for _, e := range m.ChatExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.ChatExists with params: %#v", *e.params)
		}
	}

	afterChatExistsCounter := mm_atomic.LoadUint64(&m.afterChatExistsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ChatExistsMock.defaultExpectation != nil && afterChatExistsCounter < 1 {
		if m.ChatExistsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatRepositoryMock.ChatExists")
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.ChatExists with params: %#v", *m.ChatExistsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChatExists != nil && afterChatExistsCounter < 1 {
		m.t.Error("Expected call to ChatRepositoryMock.ChatExists")
	}

	if !m.ChatExistsMock.invocationsDone() && afterChatExistsCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.ChatExists but found %d calls",
			mm_atomic.LoadUint64(&m.ChatExistsMock.expectedInvocations), afterChatExistsCounter)
	}
}

type mChatRepositoryMockCreateChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateChatExpectation
	expectations       []*ChatRepositoryMockCreateChatExpectation

	callArgs []*ChatRepositoryMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatRepositoryMockCreateChatExpectation specifies expectation struct of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectation struct {
	mock      *ChatRepositoryMock
	params    *ChatRepositoryMockCreateChatParams
	paramPtrs *ChatRepositoryMockCreateChatParamPtrs
	results   *ChatRepositoryMockCreateChatResults
	Counter   uint64
}

// ChatRepositoryMockCreateChatParams contains parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParams struct {
	ctx context.Context
	cp1 *model.CreateChat
}

// ChatRepositoryMockCreateChatParamPtrs contains pointers to parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParamPtrs struct {
	ctx *context.Context
	cp1 **model.CreateChat
}

// ChatRepositoryMockCreateChatResults contains results of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatResults struct {
	cp2 *model.ChatModel
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mChatRepositoryMockCreateChat) Optional() *mChatRepositoryMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Expect(ctx context.Context, cp1 *model.CreateChat) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &ChatRepositoryMockCreateChatParams{ctx, cp1}
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateChat
}

// ExpectCp1Param2 sets up expected param cp1 for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectCp1Param2(cp1 *model.CreateChat) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.cp1 = &cp1

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Inspect(f func(ctx context.Context, cp1 *model.CreateChat)) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Return(cp2 *model.ChatModel, err error) *ChatRepositoryMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &ChatRepositoryMockCreateChatResults{cp2, err}
	return mmCreateChat.mock
}

// Set uses given function f to mock the ChatRepository.CreateChat method
func (mmCreateChat *mChatRepositoryMockCreateChat) Set(f func(ctx context.Context, cp1 *model.CreateChat) (cp2 *model.ChatModel, err error)) *ChatRepositoryMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	return mmCreateChat.mock
}

// When sets expectation for the ChatRepository.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mChatRepositoryMockCreateChat) When(ctx context.Context, cp1 *model.CreateChat) *ChatRepositoryMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateChatExpectation{
		mock:   mmCreateChat.mock,
		params: &ChatRepositoryMockCreateChatParams{ctx, cp1},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateChatExpectation) Then(cp2 *model.ChatModel, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateChatResults{cp2, err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateChat should be invoked
func (mmCreateChat *mChatRepositoryMockCreateChat) Times(n uint64) *mChatRepositoryMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of ChatRepositoryMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	return mmCreateChat
}

func (mmCreateChat *mChatRepositoryMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements repository.ChatRepository
func (mmCreateChat *ChatRepositoryMock) CreateChat(ctx context.Context, cp1 *model.CreateChat) (cp2 *model.ChatModel, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, cp1)
	}

	mm_params := ChatRepositoryMockCreateChatParams{ctx, cp1}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateChatParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter cp1, want: %#v, got: %#v%s\n", *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the ChatRepositoryMock.CreateChat")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, cp1)
	}
	mmCreateChat.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateChat. %v %v", ctx, cp1)
	return
}

// CreateChatAfterCounter returns a count of finished ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mChatRepositoryMockCreateChat) Calls() []*ChatRepositoryMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat with params: %#v", *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatRepositoryMock.CreateChat")
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat with params: %#v", *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Error("Expected call to ChatRepositoryMock.CreateChat")
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateChat but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), afterCreateChatCounter)
	}
}

type mChatRepositoryMockCreateMessage struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateMessageExpectation
	expectations       []*ChatRepositoryMockCreateMessageExpectation

	callArgs []*ChatRepositoryMockCreateMessageParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatRepositoryMockCreateMessageExpectation specifies expectation struct of the ChatRepository.CreateMessage
type ChatRepositoryMockCreateMessageExpectation struct {
	mock      *ChatRepositoryMock
	params    *ChatRepositoryMockCreateMessageParams
	paramPtrs *ChatRepositoryMockCreateMessageParamPtrs
	results   *ChatRepositoryMockCreateMessageResults
	Counter   uint64
}

// ChatRepositoryMockCreateMessageParams contains parameters of the ChatRepository.CreateMessage
type ChatRepositoryMockCreateMessageParams struct {
	ctx context.Context
	cp1 *model.CreateMessage
}

// ChatRepositoryMockCreateMessageParamPtrs contains pointers to parameters of the ChatRepository.CreateMessage
type ChatRepositoryMockCreateMessageParamPtrs struct {
	ctx *context.Context
	cp1 **model.CreateMessage
}

// ChatRepositoryMockCreateMessageResults contains results of the ChatRepository.CreateMessage
type ChatRepositoryMockCreateMessageResults struct {
	mp1 *model.MessageModel
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Optional() *mChatRepositoryMockCreateMessage {
	mmCreateMessage.optional = true
	return mmCreateMessage
}

// Expect sets up expected params for ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Expect(ctx context.Context, cp1 *model.CreateMessage) *mChatRepositoryMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &ChatRepositoryMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.paramPtrs != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by ExpectParams functions")
	}

	mmCreateMessage.defaultExpectation.params = &ChatRepositoryMockCreateMessageParams{ctx, cp1}
	for _, e := range mmCreateMessage.expectations {
		if minimock.Equal(e.params, mmCreateMessage.defaultExpectation.params) {
			mmCreateMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateMessage.defaultExpectation.params)
		}
	}

	return mmCreateMessage
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &ChatRepositoryMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.params != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Expect")
	}

	if mmCreateMessage.defaultExpectation.paramPtrs == nil {
		mmCreateMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateMessageParamPtrs{}
	}
	mmCreateMessage.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateMessage
}

// ExpectCp1Param2 sets up expected param cp1 for ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) ExpectCp1Param2(cp1 *model.CreateMessage) *mChatRepositoryMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &ChatRepositoryMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.params != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Expect")
	}

	if mmCreateMessage.defaultExpectation.paramPtrs == nil {
		mmCreateMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateMessageParamPtrs{}
	}
	mmCreateMessage.defaultExpectation.paramPtrs.cp1 = &cp1

	return mmCreateMessage
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Inspect(f func(ctx context.Context, cp1 *model.CreateMessage)) *mChatRepositoryMockCreateMessage {
	if mmCreateMessage.mock.inspectFuncCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateMessage")
	}

	mmCreateMessage.mock.inspectFuncCreateMessage = f

	return mmCreateMessage
}

// Return sets up results that will be returned by ChatRepository.CreateMessage
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Return(mp1 *model.MessageModel, err error) *ChatRepositoryMock {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &ChatRepositoryMockCreateMessageExpectation{mock: mmCreateMessage.mock}
	}
	mmCreateMessage.defaultExpectation.results = &ChatRepositoryMockCreateMessageResults{mp1, err}
	return mmCreateMessage.mock
}

// Set uses given function f to mock the ChatRepository.CreateMessage method
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Set(f func(ctx context.Context, cp1 *model.CreateMessage) (mp1 *model.MessageModel, err error)) *ChatRepositoryMock {
	if mmCreateMessage.defaultExpectation != nil {
		mmCreateMessage.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateMessage method")
	}

	if len(mmCreateMessage.expectations) > 0 {
		mmCreateMessage.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateMessage method")
	}

	mmCreateMessage.mock.funcCreateMessage = f
	return mmCreateMessage.mock
}

// When sets expectation for the ChatRepository.CreateMessage which will trigger the result defined by the following
// Then helper
func (mmCreateMessage *mChatRepositoryMockCreateMessage) When(ctx context.Context, cp1 *model.CreateMessage) *ChatRepositoryMockCreateMessageExpectation {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("ChatRepositoryMock.CreateMessage mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateMessageExpectation{
		mock:   mmCreateMessage.mock,
		params: &ChatRepositoryMockCreateMessageParams{ctx, cp1},
	}
	mmCreateMessage.expectations = append(mmCreateMessage.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateMessage return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateMessageExpectation) Then(mp1 *model.MessageModel, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateMessageResults{mp1, err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateMessage should be invoked
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Times(n uint64) *mChatRepositoryMockCreateMessage {
	if n == 0 {
		mmCreateMessage.mock.t.Fatalf("Times of ChatRepositoryMock.CreateMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateMessage.expectedInvocations, n)
	return mmCreateMessage
}

func (mmCreateMessage *mChatRepositoryMockCreateMessage) invocationsDone() bool {
	if len(mmCreateMessage.expectations) == 0 && mmCreateMessage.defaultExpectation == nil && mmCreateMessage.mock.funcCreateMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateMessage.mock.afterCreateMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateMessage implements repository.ChatRepository
func (mmCreateMessage *ChatRepositoryMock) CreateMessage(ctx context.Context, cp1 *model.CreateMessage) (mp1 *model.MessageModel, err error) {
	mm_atomic.AddUint64(&mmCreateMessage.beforeCreateMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateMessage.afterCreateMessageCounter, 1)

	if mmCreateMessage.inspectFuncCreateMessage != nil {
		mmCreateMessage.inspectFuncCreateMessage(ctx, cp1)
	}

	mm_params := ChatRepositoryMockCreateMessageParams{ctx, cp1}

	// Record call args
	mmCreateMessage.CreateMessageMock.mutex.Lock()
	mmCreateMessage.CreateMessageMock.callArgs = append(mmCreateMessage.CreateMessageMock.callArgs, &mm_params)
	mmCreateMessage.CreateMessageMock.mutex.Unlock()

	for _, e := range mmCreateMessage.CreateMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp1, e.results.err
		}
	}

	if mmCreateMessage.CreateMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateMessage.CreateMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateMessage.CreateMessageMock.defaultExpectation.params
		mm_want_ptrs := mmCreateMessage.CreateMessageMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateMessageParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateMessage.t.Errorf("ChatRepositoryMock.CreateMessage got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateMessage.t.Errorf("ChatRepositoryMock.CreateMessage got unexpected parameter cp1, want: %#v, got: %#v%s\n", *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateMessage.t.Errorf("ChatRepositoryMock.CreateMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateMessage.CreateMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateMessage.t.Fatal("No results are set for the ChatRepositoryMock.CreateMessage")
		}
		return (*mm_results).mp1, (*mm_results).err
	}
	if mmCreateMessage.funcCreateMessage != nil {
		return mmCreateMessage.funcCreateMessage(ctx, cp1)
	}
	mmCreateMessage.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateMessage. %v %v", ctx, cp1)
	return
}

// CreateMessageAfterCounter returns a count of finished ChatRepositoryMock.CreateMessage invocations
func (mmCreateMessage *ChatRepositoryMock) CreateMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMessage.afterCreateMessageCounter)
}

// CreateMessageBeforeCounter returns a count of ChatRepositoryMock.CreateMessage invocations
func (mmCreateMessage *ChatRepositoryMock) CreateMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMessage.beforeCreateMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateMessage *mChatRepositoryMockCreateMessage) Calls() []*ChatRepositoryMockCreateMessageParams {
	mmCreateMessage.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateMessageParams, len(mmCreateMessage.callArgs))
	copy(argCopy, mmCreateMessage.callArgs)

	mmCreateMessage.mutex.RUnlock()

	return argCopy
}

// MinimockCreateMessageDone returns true if the count of the CreateMessage invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateMessageDone() bool {
	if m.CreateMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMessageMock.invocationsDone()
}

// MinimockCreateMessageInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateMessageInspect() {
	for _, e := range m.CreateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateMessage with params: %#v", *e.params)
		}
	}

	afterCreateMessageCounter := mm_atomic.LoadUint64(&m.afterCreateMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMessageMock.defaultExpectation != nil && afterCreateMessageCounter < 1 {
		if m.CreateMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatRepositoryMock.CreateMessage")
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateMessage with params: %#v", *m.CreateMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateMessage != nil && afterCreateMessageCounter < 1 {
		m.t.Error("Expected call to ChatRepositoryMock.CreateMessage")
	}

	if !m.CreateMessageMock.invocationsDone() && afterCreateMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateMessage but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMessageMock.expectedInvocations), afterCreateMessageCounter)
	}
}

type mChatRepositoryMockDelete struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockDeleteExpectation
	expectations       []*ChatRepositoryMockDeleteExpectation

	callArgs []*ChatRepositoryMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatRepositoryMockDeleteExpectation specifies expectation struct of the ChatRepository.Delete
type ChatRepositoryMockDeleteExpectation struct {
	mock      *ChatRepositoryMock
	params    *ChatRepositoryMockDeleteParams
	paramPtrs *ChatRepositoryMockDeleteParamPtrs
	results   *ChatRepositoryMockDeleteResults
	Counter   uint64
}

// ChatRepositoryMockDeleteParams contains parameters of the ChatRepository.Delete
type ChatRepositoryMockDeleteParams struct {
	ctx context.Context
	i1  int64
}

// ChatRepositoryMockDeleteParamPtrs contains pointers to parameters of the ChatRepository.Delete
type ChatRepositoryMockDeleteParamPtrs struct {
	ctx *context.Context
	i1  *int64
}

// ChatRepositoryMockDeleteResults contains results of the ChatRepository.Delete
type ChatRepositoryMockDeleteResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mChatRepositoryMockDelete) Optional() *mChatRepositoryMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) Expect(ctx context.Context, i1 int64) *mChatRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &ChatRepositoryMockDeleteParams{ctx, i1}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDelete
}

// ExpectI1Param2 sets up expected param i1 for ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) ExpectI1Param2(i1 int64) *mChatRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.i1 = &i1

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) Inspect(f func(ctx context.Context, i1 int64)) *mChatRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by ChatRepository.Delete
func (mmDelete *mChatRepositoryMockDelete) Return(err error) *ChatRepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatRepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &ChatRepositoryMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the ChatRepository.Delete method
func (mmDelete *mChatRepositoryMockDelete) Set(f func(ctx context.Context, i1 int64) (err error)) *ChatRepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the ChatRepository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the ChatRepository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the ChatRepository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mChatRepositoryMockDelete) When(ctx context.Context, i1 int64) *ChatRepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatRepositoryMock.Delete mock is already set by Set")
	}

	expectation := &ChatRepositoryMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &ChatRepositoryMockDeleteParams{ctx, i1},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.Delete return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockDeleteExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockDeleteResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.Delete should be invoked
func (mmDelete *mChatRepositoryMockDelete) Times(n uint64) *mChatRepositoryMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of ChatRepositoryMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	return mmDelete
}

func (mmDelete *mChatRepositoryMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements repository.ChatRepository
func (mmDelete *ChatRepositoryMock) Delete(ctx context.Context, i1 int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, i1)
	}

	mm_params := ChatRepositoryMockDeleteParams{ctx, i1}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockDeleteParams{ctx, i1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("ChatRepositoryMock.Delete got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.i1 != nil && !minimock.Equal(*mm_want_ptrs.i1, mm_got.i1) {
				mmDelete.t.Errorf("ChatRepositoryMock.Delete got unexpected parameter i1, want: %#v, got: %#v%s\n", *mm_want_ptrs.i1, mm_got.i1, minimock.Diff(*mm_want_ptrs.i1, mm_got.i1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("ChatRepositoryMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the ChatRepositoryMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, i1)
	}
	mmDelete.t.Fatalf("Unexpected call to ChatRepositoryMock.Delete. %v %v", ctx, i1)
	return
}

// DeleteAfterCounter returns a count of finished ChatRepositoryMock.Delete invocations
func (mmDelete *ChatRepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of ChatRepositoryMock.Delete invocations
func (mmDelete *ChatRepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mChatRepositoryMockDelete) Calls() []*ChatRepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.Delete with params: %#v", *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatRepositoryMock.Delete")
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Error("Expected call to ChatRepositoryMock.Delete")
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.Delete but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), afterDeleteCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockChatExistsInspect()

			m.MinimockCreateChatInspect()

			m.MinimockCreateMessageInspect()

			m.MinimockDeleteInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChatExistsDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockCreateMessageDone() &&
		m.MinimockDeleteDone()
}
